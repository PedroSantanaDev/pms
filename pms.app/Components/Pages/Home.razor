@page "/"

@using Microsoft.AspNetCore.Authorization
@using ChartJs.Blazor;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop

@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart

@using Microsoft.JSInterop

@using Microsoft.EntityFrameworkCore

@using pms.app.Models
@using System.Linq.Expressions;


@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Dashboard</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-6">
                <Chart Config="_categoriesConfig"></Chart>
            </div>
        </div>
    </div>

</div>


@code {

    private PieConfig _categoriesConfig;
    private List<Category> _categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesData();
    }

    private async Task LoadCategoriesData()
    {
        _categoriesConfig ??= new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Top Categories by Item Count"
                    }
                }
            };

        _categories ??= await GetCategories();

        if (_categories != null && _categories.Any())
        {
            var topCategories = _categories.OrderByDescending(category => category.Items?.Count ?? 0);

            // Create a new Random instance to generate colours
            var random = new Random();

            // Create a list to hold dataset colors and labels
            var backgroundColors = new List<string>();
            var labels = new List<string>();

            foreach (var category in topCategories)
            {
                // Retrieve the count of items for the current category
                var itemCount = category.Items?.Count ?? 0;

                // Generate a random color for each category
                var randomColor = ColorUtil.ColorHexString((byte)random.Next(0, 255), (byte)random.Next(0, 255), (byte)random.Next(0, 255));

                // Add the random color to the list
                backgroundColors.Add(randomColor);

                // Add the category name to the labels list
                labels.Add(category.Name);

                Console.WriteLine($"Label: {category.Name}, Count: {itemCount}");
            }

            // Create the dataset outside the loop
            var dataset = new PieDataset<int>(topCategories.Select(category => category.Items?.Count ?? 0).ToArray())
                {
                    BackgroundColor = backgroundColors.ToArray()
                };

            _categoriesConfig.Data.Datasets.Add(dataset);

            // Ensure the _config.Data.Labels collection has enough elements
            while (_categoriesConfig.Data.Labels.Count < labels.Count)
            {
                _categoriesConfig.Data.Labels.Add("");
            }

            // Assign labels
            for (int i = 0; i < labels.Count; i++)
            {
                _categoriesConfig.Data.Labels[i] = labels[i];
            }
        }
        else
        {
            Console.WriteLine("No categories found.");
        }
    }


    private async Task<List<Category>> GetCategories()
    {
        // Set up filter
        Expression<Func<Category, bool>> filter = null;

        Func<IQueryable<Category>, IOrderedQueryable<Category>> orderBy = q => q.OrderBy(i => i.Name);

        // Set up includeProperties
        string includeProperties = "Items";

        // Set up pagination to max 500 records, out-of-scope
        int page = 1;
        int pageSize = 500;

        var categories = await unitOfWork.GetRepository<Category>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );

        return categories;
    }
}
