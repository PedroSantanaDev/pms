@page "/customers/create"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using pms.app.Enums;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create</PageTitle>

<div class="card">
    <div class="card-header text-white bg-primary">
        <h4>Add Customer</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="col-md-6">
                    <EditForm method="post" Model="Customer" OnValidSubmit="AddCustomer" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="mb-3">
                            <label for="name" class="form-label font-weight-bold">Name:</label>
                            <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                            <ValidationMessage For="() => Customer.Name" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label font-weight-bold">Email:</label>
                            <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                            <ValidationMessage For="() => Customer.Email" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label font-weight-bold">Phone:</label>
                            <InputText id="phone" @bind-Value="Customer.Phone" class="form-control" />
                            <ValidationMessage For="() => Customer.Phone" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label font-weight-bold">Address:</label>
                            <InputText id="address" @bind-Value="Customer.Address" class="form-control" />
                            <ValidationMessage For="() => Customer.Address" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="city" class="form-label font-weight-bold">City:</label>
                            <InputText id="city" @bind-Value="Customer.City" class="form-control" />
                            <ValidationMessage For="() => Customer.City" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="status" class="form-label font-weight-bold">Status:</label>
                            <InputSelect id="status" @bind-Value="Customer.Status" class="form-control">
                                @foreach (var statusOption in Status.GetStatusOptions())
                                {
                                    <option value="@statusOption">@statusOption</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Customer.Status" class="text-danger" />
                        </div>
                        <div class="mt-3">
                            <button type="submit" class="btn btn-sm btn-primary">Create</button>
                            <a href="/customers" class="btn btn-sm btn-secondary">Back to List</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [SupplyParameterFromForm]
    public Customer Customer { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddCustomer()
    {
        Customer.Created = DateTime.Now;
        await unitOfWork.GetRepository<Customer>().AddAsync(Customer);

        NavigationManager.NavigateTo("/customers");
    }
}
