@page "/customers/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Delete</PageTitle>


<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Delete Customer</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (customer is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-2">Name</dt>
                        <dd class="col-sm-10">@customer.Name</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Email</dt>
                        <dd class="col-sm-10">@customer.Email</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Phone</dt>
                        <dd class="col-sm-10">@customer.Phone</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Address</dt>
                        <dd class="col-sm-10">@customer.Address</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">City</dt>
                        <dd class="col-sm-10">@customer.City</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Status</dt>
                        <dd class="col-sm-10">@customer.Status</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Created</dt>
                        <dd class="col-sm-10">@customer.Created</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Updated</dt>
                        <dd class="col-sm-10">@customer.Updated</dd>
                    </dl>
                    <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-sm btn-danger" disabled="@(customer is null)">Delete</button>
                        <a href="/customers" class="btn btn-sm btn-secondary">Back to List</a>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>


@code {
    Customer? customer;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        // Set up filter
        Expression<Func<Customer, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Customer>, IOrderedQueryable<Customer>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "CustomerItems";

        // Set up pagination
        int page = 1;
        int pageSize = 1;

        var customers = await unitOfWork.GetRepository<Customer>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );

        customer = customers.FirstOrDefault();

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCustomer()
    {

        if (customer != null)
        {
            // Remove the category from associated items
            if (customer.CustomerItems != null && customer.CustomerItems.Count > 0)
            {
                foreach (var item in customer.CustomerItems)
                {
                    item.CustomerId = null;
                    item.ItemId = null;
                    await unitOfWork.GetRepository<CustomerItem>().UpdateAsync(item);
                    await unitOfWork.GetRepository<CustomerItem>().DeleteAsync(item.Id);
                }
            }

            await unitOfWork.GetRepository<Customer>().DeleteAsync(customer.Id);
        }
        NavigationManager.NavigateTo("/customers");
    }
}
