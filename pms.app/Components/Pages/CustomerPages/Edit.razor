@page "/Customers/edit"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;
@using pms.app.Enums;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Edit Customer</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">

                @if (Customer is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-4">
                            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />
                                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                                <div class="mb-3">
                                    <label for="name" class="form-label">Name:</label>
                                    <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                                    <ValidationMessage For="() => Customer.Name" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email:</label>
                                    <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                                    <ValidationMessage For="() => Customer.Email" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="phone" class="form-label">Phone:</label>
                                    <InputText id="phone" @bind-Value="Customer.Phone" class="form-control" />
                                    <ValidationMessage For="() => Customer.Phone" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="address" class="form-label">Address:</label>
                                    <InputText id="address" @bind-Value="Customer.Address" class="form-control" />
                                    <ValidationMessage For="() => Customer.Address" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="city" class="form-label">City:</label>
                                    <InputText id="city" @bind-Value="Customer.City" class="form-control" />
                                    <ValidationMessage For="() => Customer.City" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="status" class="form-label">Status:</label>
                                    <InputSelect id="status" @bind-Value="Customer.Status" class="form-control">
                                        @foreach (var statusOption in Status.GetStatusOptions())
                                        {
                                            <option value="@statusOption">@statusOption</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => Customer.Status" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="created" class="form-label">Created:</label>
                                    <InputDate id="created" @bind-Value="Customer.Created" class="form-control" readonly />
                                    <ValidationMessage For="() => Customer.Created" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-sm btn-primary">Save</button>
                                <a href="/customers" class="btn btn-sm btn-secondary">Back to List</a>
                            </EditForm>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Customer? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Customer ??= await unitOfWork.GetRepository<Customer>().GetByIdAsync(Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCustomer()
    {
        try
        {
            if (Customer != null)
            {
                Customer.Updated = DateTime.Now;
                await unitOfWork.GetRepository<Customer>().UpdateAsync(Customer);
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            var customerExits = await CustomerExists(Customer!.Id);

            if (!customerExits)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private async Task<bool> CustomerExists(int id)
    {
        var customer = await unitOfWork.GetRepository<Customer>().GetByIdAsync(id);

        if (customer == null)
        {
            return false;
        }
        return true;
    }
}
