@page "/customers/details"
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions;
@using System.Globalization
@using pms.app.Models
@using Microsoft.AspNetCore.Authorization

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Details</PageTitle>


<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Customer Details</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (customer is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-2 font-weight-bold">Name:</dt>
                        <dd class="col-sm-10">@customer.Name</dd>
                        <dt class="col-sm-2 font-weight-bold">Email:</dt>
                        <dd class="col-sm-10">@customer.Email</dd>
                        <dt class="col-sm-2 font-weight-bold">Phone:</dt>
                        <dd class="col-sm-10">@customer.Phone</dd>
                        <dt class="col-sm-2 font-weight-bold">Address:</dt>
                        <dd class="col-sm-10">@customer.Address</dd>
                        <dt class="col-sm-2 font-weight-bold">City:</dt>
                        <dd class="col-sm-10">@customer.City</dd>
                        <dt class="col-sm-2 font-weight-bold">Status:</dt>
                        <dd class="col-sm-10">@customer.Status</dd>
                        <dt class="col-sm-2 font-weight-bold">Created:</dt>
                        <dd class="col-sm-10">@customer.Created</dd>
                        <dt class="col-sm-2 font-weight-bold">Updated:</dt>
                        <dd class="col-sm-10">@customer.Updated</dd>
                    </dl>

                    <div>
                        <a href="@($"/customers/edit?id={customer.Id}")" class="btn btn-sm btn-warning text-white">Edit</a>
                        <a href="@($"/customers")" class="btn btn-sm btn-secondary">Back to List</a>
                    </div>

                    <h5>Customer Items</h5>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Number (SKU)</th>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Status</th>
                                <th>Date Assinged</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (customer.CustomerItems.Any())
                            {
                                @foreach (var customerItem in customer.CustomerItems)
                                {
                                    <tr>
                                        <td>@customerItem.Item.SKU</td>
                                        <td>@customerItem.Item.Name</td>
                                        <td>@customerItem.Item.Price.ToString("C", CultureInfo.CurrentCulture)</td>
                                        <td>@customerItem.Item.Status</td>
                                        <td>@customerItem.AssignedDate</td>
                                        <td>
                                            <a href="@($"/items/details?id={customerItem.Item.Id}")" class="btn btn-sm btn-info text-white">View</a>
                                            <a href="@($"/items/edit?id={customerItem.Item.Id}")" class="btn btn-sm btn-primary">Edit</a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">No items assigned to this customer.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>

    </div>
</div>

@code {
    Customer? customer;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        // Set up filter
        Expression<Func<Customer, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Customer>, IOrderedQueryable<Customer>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "CustomerItems,CustomerItems.Item";

        // Set up pagination to max 500 records, out-of-scope
        int page = 1;
        int pageSize = 500;

        var categories = await unitOfWork.GetRepository<Customer>().GetAllAsync(
        filter,
        orderBy,
        includeProperties,
        page,
        pageSize
        );

        customer = categories.FirstOrDefault();

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
