@page "/customers/details"
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions;
@using pms.app.Models

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Customer</h4>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@customer.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@customer.Phone</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@customer.Address</dd>
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@customer.City</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@customer.Status</dd>
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@customer.Created</dd>
            <dt class="col-sm-2">Updated</dt>
            <dd class="col-sm-10">@customer.Updated</dd>
        </dl>

        <h5>Customer Items</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>Number (SKU)</th>
                    <th>Name</th>
                    <th>Price</th>             
                </tr>
            </thead>
            <tbody>
                @if (customer.CustomerItems.Any())
                {
                    @foreach (var customerItem in customer.CustomerItems)
                    {
                        <tr>
                            <td>@customerItem.Item.SKU</td>
                            <td>@customerItem.Item.Name</td>
                            <td>@customerItem.Item.Price</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2">No items assigned to this customer.</td>
                    </tr>
                }
            </tbody>
        </table>

        <div>
            <a href="@($"/customers/edit?id={customer.Id}")">Edit</a> |
            <a href="@($"/customers")">Back to List</a>
        </div>
    }
</div>

@code {
    Customer? customer;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        // Set up filter
        Expression<Func<Customer, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Customer>, IOrderedQueryable<Customer>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "CustomerItems,CustomerItems.Item";

        // Set up pagination
        int page = 1;
        int pageSize = 30;

        var categories = await unitOfWork.GetRepository<Customer>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
            );

        customer = categories.FirstOrDefault();

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
