@page "/Items/edit"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;
@using pms.app.Enums;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Item</h4>
<hr />
@if (Item is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Item" OnValidSubmit="UpdateItem" FormName="edit" Enhance>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div>
                }
                <DataAnnotationsValidator />
                <input type="hidden" name="Item.Id" value="@Item.Id" />
                <div class="mb-3">
                    <label for="sku" class="form-label">Item Number (SKU):</label>
                    <InputNumber id="sku" @bind-Value="Item.SKU" class="form-control" />
                    <ValidationMessage For="() => Item.SKU" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                    <ValidationMessage For="() => Item.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputTextArea rows="4" id="description" @bind-Value="Item.Description" class="form-control" />
                    <ValidationMessage For="() => Item.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Item.Price" class="form-control" />
                    <ValidationMessage For="() => Item.Price" class="text-danger" />
                </div>


                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Item.Status" class="form-control">
                        @foreach (var statusOption in Status.GetStatusOptions())
                        {
                            <option value="@statusOption">@statusOption</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Item.Status" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" @bind-Value="Item.CategoryId" class="form-control">
                        <option value="0"></option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Item.CategoryId)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="created" class="form-label">Created:</label>
                    <InputDate id="created" @bind-Value="Item.Created" class="form-control" readonly />
                    <ValidationMessage For="() => Item.Created" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/items">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Item? Item { get; set; }

    List<Category> Categories { get; set; }

    string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Item ??= await unitOfWork.GetRepository<Item>().GetByIdAsync(Id);

        if (Item is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Categories ??= await unitOfWork.GetRepository<Category>().GetAllAsync();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateItem()
    {
        try
        {
            if (Item != null)
            {
                // Uncategorized was selected by the user
                if (Item.CategoryId == 0)
                {
                    Item.CategoryId = null;
                }

                //Check if another product has thta SKU
                var itemWithSameSKU = await unitOfWork.GetRepository<Item>().GetAllAsync(i => i.SKU == Item.SKU && i.Id != Item.Id);

                if (itemWithSameSKU != null && itemWithSameSKU.Count > 0)
                {
                    ErrorMessage = "Item Number (SKU) is already in use. Please choose a different Item Number (SKU).";
                    return; // Exit method without updating the item
                }
            }

            Item!.Updated = DateTime.Now;
            await unitOfWork.GetRepository<Item>().UpdateAsync(Item);
        }
        catch (DbUpdateConcurrencyException)
        {
            var itemExits = await ItemExists(Item!.Id);
            if (!itemExits)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/items");
    }

    private async Task<bool> ItemExists(int id)
    {
        var item = await unitOfWork.GetRepository<Item>().GetByIdAsync(id);

        if (item == null)
        {
            return false;
        }
        return true;
    }

}
