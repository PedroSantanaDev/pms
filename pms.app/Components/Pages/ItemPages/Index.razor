@page "/items"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using System.Linq.Expressions;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Items</PageTitle>


<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Items</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <p>
                    <a href="items/create" class="btn btn-primary">Add New</a>
                </p>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Item Number (SKU)</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Category</th>
                            <th>Created</th>
                            <th>Update</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Items)
                        {
                            <tr>
                                <td>@item.SKU</td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>@item.Price</td>
                                <td>@item.Status</td>
                                <td>@item.Category?.Name</td>
                                <td>@item.Created</td>
                                <td>@item.Updated</td>
                                <td>
                                    <a href="@($"items/edit?id={item.Id}")" class="btn btn-sm btn-warning">Edit</a>
                                    <a href="@($"items/details?id={item.Id}")" class="btn btn-sm btn-info">Details</a>
                                    <a href="@($"items/delete?id={item.Id}")" class="btn btn-sm btn-danger">Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>


@code {
    List<Item> Items { get; set; } = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Item, bool>> filter = null;

        Func<IQueryable<Item>, IOrderedQueryable<Item>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "Category";

        // Set up pagination to max 500 records, out-of-scope
        int page = 1;
        int pageSize = 500;

        Items = await unitOfWork.GetRepository<Item>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );
    }
}
