@page "/items/details"

@using Microsoft.EntityFrameworkCore;
@using System.Linq.Expressions;
@using pms.app.Models
@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Item</h4>
    <hr />
    @if (item is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Item Number (SKU)</dt>
            <dd class="col-sm-10">@item.SKU</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@item.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@item.Description</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@item.Price</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@item.Status</dd>

            @if (item.Category != null)
            {
                <dt class="col-sm-2">CategoryId</dt>
                <dd class="col-sm-10">@item.CategoryId</dd>
                <dt class="col-sm-2">Category Name </dt>
                <dd class="col-sm-10">@item.Category.Name</dd>
            }
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@item.Created</dd>
            <dt class="col-sm-2">Updated</dt>
            <dd class="col-sm-10">@item.Updated</dd>
        </dl>
        <div>
            <a href="@($"/items/edit?id={item.Id}")">Edit</a> |
            <a href="@($"/items")">Back to List</a>
        </div>
    }
</div>

@code {
    Item? item;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Item, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Item>, IOrderedQueryable<Item>> orderBy = null;

        // Set up includeProperties
        string includeProperties = "Category";

        // Set up pagination
        int page = 1;
        int pageSize = 30;

        var items = await unitOfWork.GetRepository<Item>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );



        item = items.First();

        if (item is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
