@page "/items/create"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using pms.app.Enums;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create</PageTitle>

<div class="card">
    <div class="card-header text-white bg-primary">
        <h4>Add Item</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <EditForm method="post" Model="Item" OnValidSubmit="AddItem" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    <div class="mb-3">
                        <label for="sku" class="form-label">SKU:</label>
                        <InputNumber id="sku" @bind-Value="Item.SKU" class="form-control" />
                        <ValidationMessage For="() => Item.SKU" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                        <ValidationMessage For="() => Item.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description:</label>
                        <InputTextArea rows="4" id="description" @bind-Value="Item.Description" class="form-control" />
                        <ValidationMessage For="() => Item.Description" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Price:</label>
                        <InputNumber id="price" @bind-Value="Item.Price" class="form-control" />
                        <ValidationMessage For="() => Item.Price" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status:</label>
                        <InputSelect id="status" @bind-Value="Item.Status" class="form-control">
                            @foreach (var statusOption in Status.GetStatusOptions())
                            {
                                <option value="@statusOption">@statusOption</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Item.Status" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="category" class="form-label">Category:</label>
                        <InputSelect id="category" @bind-Value="Item.CategoryId" class="form-control">
                            <option value="0"></option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Item.CategoryId)" class="text-danger" />
                    </div>
                    <div>
                        <button type="submit" class="btn btn-sm btn-primary">Create</button>
                        <a href="/items" class="btn btn-sm btn-secondary">Back to List</a>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>




@code {

    [SupplyParameterFromForm]
    public Item Item { get; set; } = new();

    List<Category> Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories ??= await unitOfWork.GetRepository<Category>().GetAllAsync();
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddItem()
    {
        if (Item.CategoryId == 0)
        {
            Item.CategoryId = null;
        }
        //Item.CustomerItems = null;
        Item.Created = DateTime.Now;
        await unitOfWork.GetRepository<Item>().AddAsync(Item);
        NavigationManager.NavigateTo("/items");
    }
}
