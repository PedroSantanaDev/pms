@page "/reports"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using System.Linq.Expressions;
@using System.Globalization

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>Reports</PageTitle>

<h1>Reports</h1>

<div>
    <a href="expensiveitemsreport">
        <button type="button" class="btn btn-primary">Customers with X Most Expensive Items Report</button>
    </a>
</div>

<hr />
<form class="row">
    <div class="form-group col-sm-3">
        <label for="startSku"><strong>Start Item Number</strong></label>
        <select class="form-control" id="startSku" @bind="startSku" required>
            @foreach (var item in Items)
            {
                <option value="@item.SKU">@item.SKU</option>
            }
        </select>
    </div>

    <div class="form-group col-sm-3">
        <label for="endSku"><strong>End Item Number</strong></label>
        <select class="form-control" id="endSku" @bind="endSku" required>
            @foreach (var item in Items)
            {
                <option value="@item.SKU">@item.SKU</option>
            }
        </select>
    </div>

    <div class="form-group col-sm-3 align-self-end">
        <button type="button" class="btn btn-success btn-block" @onclick="GenerateReport">Generate</button>
    </div>
</form>

@if (!IsValidRange())
{
    <div class="row">
        <div class="col-sm-12 text-danger">
            Please select start and end item number.
        </div>
    </div>
}

@if (customersWithItems != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Item Name</th>
                <th>Item Number (SKU)</th>
                <th>Item Description</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customerWithItem in customersWithItems)
            {
                <tr>
                    <td>@customerWithItem.Customer.Name</td>
                    <td>@customerWithItem.Item.Name</td>
                    <td>@customerWithItem.Item.SKU</td>
                    <td>@customerWithItem.Item.Description</td>
                    <td>@customerWithItem.Item.Price.ToString("C", CultureInfo.CurrentCulture)</td>
                    <td>@customerWithItem.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Properties
    private int startSku;
    private int endSku;
    private List<CustomerItem> customersWithItems;

    private List<Item> Items;

    protected override async Task OnInitializedAsync()
    {
        Func<IQueryable<Item>, IOrderedQueryable<Item>> orderBy = q => q.OrderBy(i => i.SKU);
        Items ??= await unitOfWork.GetRepository<Item>().GetAllAsync(null, orderBy, null, 1, 500);
    }

    // Method to generate report
    private async Task GenerateReport()
    {
        if (!IsValidRange())
        {
            return; // Don't generate report, we dont have a valid range
        }

        customersWithItems = await unitOfWork.GetRepository<CustomerItem>()
            .GetAllAsync(ci => ci.Item.SKU >= startSku && ci.Item.SKU <= endSku,
                         includeProperties: "Customer,Item");
    }

    // Method to validate the SKU range
    private bool IsValidRange()
    {
        return endSku >= startSku;
    }
}
