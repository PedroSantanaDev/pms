@page "/categories/details"

@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions;
@using pms.app.Models
@using System.Globalization
@using Microsoft.AspNetCore.Authorization

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Details</PageTitle>


<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Category Details</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">

                @if (category is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-2 font-weight-bold">Name:</dt>
                        <dd class="col-sm-10">@category.Name</dd>
                        <dt class="col-sm-2 font-weight-bold">Description:</dt>
                        <dd class="col-sm-10">@category.Description</dd>
                        <dt class="col-sm-2">Created:</dt>
                        <dd class="col-sm-10 font-weight-bold">@category.Created</dd>
                        <dt class="col-sm-2">Updated:</dt>
                        <dd class="col-sm-10">@category.Updated</dd>
                    </dl>

                    <div>
                        <a href="@($"/categories/edit?id={category.Id}")" class="btn btn-sm btn-warning text-white">Edit</a>
                        <a href="@($"/categories")" class="btn btn-sm btn-secondary">Back to List</a>
                    </div>

                    <hr />

                    <h5>Category Items</h5>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Number (SKU)</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Price</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (category.Items.Any())
                            {
                                @foreach (var item in category.Items)
                                {
                                    <tr>
                                        <td>@item.SKU</td>
                                        <td>@item.Name</td>
                                        <td>@category.Name</td>
                                        <td>@item.Price.ToString("C", CultureInfo.CurrentCulture)</td>
                                        <td>@item.Status</td>
                                        <td>
                                            <a href="@($"/items/details?id={item.Id}")" class="btn btn-sm btn-info text-white">View</a>
                                            <a href="@($"/items/edit?id={item.Id}")" class="btn btn-sm btn-primary">Edit</a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="2">No items assigned to this customer.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>
    </div>
</div>

@code {
    Category? category;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Category, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Category>, IOrderedQueryable<Category>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "Items";

        // Set up pagination
        int page = 1;
        int pageSize = 500;

        var categories = await unitOfWork.GetRepository<Category>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
            );

        category = categories.FirstOrDefault();

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
