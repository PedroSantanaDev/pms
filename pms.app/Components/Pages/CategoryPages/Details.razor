@page "/categories/details"

@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions;
@using pms.app.Models
@using System.Globalization
@using Microsoft.AspNetCore.Authorization

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Category</h4>
    <hr />
    @if (category is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@category.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@category.Description</dd>
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@category.Created</dd>
            <dt class="col-sm-2">Updated</dt>
            <dd class="col-sm-10">@category.Updated</dd>
        </dl>

        <h5>Category Items</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>Number (SKU)</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @if (category.Items.Any())
                {
                    @foreach (var item in category.Items)
                    {
                        <tr>
                            <td>@item.SKU</td>
                            <td>@item.Name</td>
                            <td>@category.Name</td>
                            <td>@item.Price.ToString("C", CultureInfo.CurrentCulture)</td>
                            <td>@item.Status</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2">No items assigned to this customer.</td>
                    </tr>
                }
            </tbody>
        </table>

        <div>
            <a href="@($"/categories/edit?id={category.Id}")">Edit</a> |
            <a href="@($"/categories")">Back to List</a>
        </div>
    }
</div>

@code {
    Category? category;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Category, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Category>, IOrderedQueryable<Category>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "Items";

        // Set up pagination
        int page = 1;
        int pageSize = 500;

        var categories = await unitOfWork.GetRepository<Category>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
            );

        category = categories.FirstOrDefault();

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
