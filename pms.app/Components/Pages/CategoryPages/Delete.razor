@page "/categories/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Delete</PageTitle>


<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Delete Category</h4>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (category is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <dl class="row">
                        <dt class="col-sm-2">Name:</dt>
                        <dd class="col-sm-10">@category.Name</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Description:</dt>
                        <dd class="col-sm-10">@category.Description</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Created:</dt>
                        <dd class="col-sm-10">@category.Created</dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-2">Updated:</dt>
                        <dd class="col-sm-10">@category.Updated</dd>
                    </dl>
                    <EditForm method="post" Model="category" OnValidSubmit="DeleteCategory" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-sm btn-danger" disabled="@(category is null)">Delete</button>
                        <a href="/categories" class="btn btn-sm btn-secondary">Back to List</a>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>



@code {
    Category? category;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Category, bool>> filter = i => i.Id == Id;

        Func<IQueryable<Category>, IOrderedQueryable<Category>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "Items";

        // Set up pagination
        int page = 1;
        int pageSize = 1;

        var categories = await unitOfWork.GetRepository<Category>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );

        category = categories.FirstOrDefault();

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCategory()
    {
        if (category != null)
        {
            // Remove the category from associated items
            if (category.Items != null && category.Items.Count > 0)
            {
                foreach (var item in category.Items)
                {
                    item.CategoryId = null;
                    await unitOfWork.GetRepository<Item>().UpdateAsync(item);
                }
            }

            // Delete the category
            await unitOfWork.GetRepository<Category>().DeleteAsync(category.Id);

            // Navigate to the categories page
            NavigationManager.NavigateTo("/categories");
        }
    }
}
