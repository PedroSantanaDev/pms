@page "/categories/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Category</h4>
    <hr />
    @if (Category is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@Category.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Category.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Created</dt>
            <dd class="col-sm-10">@Category.Created</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Updated</dt>
            <dd class="col-sm-10">@Category.Updated</dd>
        </dl>
        <EditForm method="post" Model="Category" OnValidSubmit="DeleteCategory" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Category is null)">Delete</button> |
            <a href="/categories">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Category? Category;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Category = await unitOfWork.GetRepository<Category>().GetByIdAsync(Id);

        if (Category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCategory()
    {
        if (Category != null)
        {
            // Remove the category from associated items
            if (Category.Items != null && Category.Items.Count > 0)
            {
                foreach (var item in Category.Items)
                {
                    item.CategoryId = null;
                    await unitOfWork.GetRepository<Item>().UpdateAsync(item);
                }
            }

            // Delete the category
            await unitOfWork.GetRepository<Category>().DeleteAsync(Category.Id);

            // Navigate to the categories page
            NavigationManager.NavigateTo("/categories");
        }
    }
}
