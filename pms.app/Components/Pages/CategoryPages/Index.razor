@page "/categories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using System.Linq.Expressions;
@using Microsoft.JSInterop

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Categories</PageTitle>

<div class="card">

    <div class="card-header text-white bg-primary">
        <h4>Categories</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12"></div>
            <p>
                <a href="categories/create" class="btn btn-primary">Add Category</a>
            </p>

            <table class="table table-striped" id="categoriesTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Created</th>
                        <th>Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>@category.Description</td>
                            <td>@category.Created</td>
                            <td>@category.Updated</td>
                            <td>
                                <a href="@($"categories/edit?id={category.Id}")" class="btn btn-sm btn-warning">Edit</a>
                                <a href="@($"categories/details?id={category.Id}")" class="btn btn-sm btn-info">Details</a>
                                <a href="@($"categories/delete?id={category.Id}")" class="btn btn-sm btn-danger">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("myNamespace.onLoad.StartDataTable", "categoriesTable");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Category, bool>> filter = null;

        Func<IQueryable<Category>, IOrderedQueryable<Category>> orderBy = q => q.OrderByDescending(i => i.Created).ThenByDescending(i => i.Updated.HasValue ? i.Updated : DateTime.MinValue);

        // Set up includeProperties
        string includeProperties = "";

        // Set up pagination to max 500 records, out-of-scope
        int page = 1;
        int pageSize = 500;

        Categories = await unitOfWork.GetRepository<Category>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
        );

    }
}