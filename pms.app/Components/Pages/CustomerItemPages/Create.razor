@page "/customeritems/create"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using pms.app.Enums;
@using System.Linq.Expressions;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create</PageTitle>


<div class="card">
    <div class="card-header text-white bg-primary">
        <h4>Add Item To Customer</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="col-md-6">
                    <EditForm method="post" Model="CustomerItem" OnValidSubmit="AddCustomerItem" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="customer" class="form-label font-weight-bold">Customer:</label>
                            <InputSelect id="customer" @bind-Value="CustomerItem.CustomerId" class="form-control">
                                <option value="0"></option>
                                @foreach (var customer in Customers)
                                {
                                    <option value="@customer.Id">@customer.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => CustomerItem.CustomerId)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="item" class="form-label font-weight-bold">Item:</label>
                            <InputSelect id="item" @bind-Value="CustomerItem.ItemId" class="form-control">
                                <option value="0"></option>
                                @foreach (var item in Items)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => CustomerItem.ItemId)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="quantity" class="form-label font-weight-bold">Quantity:</label>
                            <InputNumber id="quantity" @bind-Value="CustomerItem.Quantity" class="form-control" />
                            <ValidationMessage For="() => CustomerItem.Quantity" class="text-danger" />
                        </div>
                        <div class="mt-3">
                            <button type="submit" class="btn btn-sm btn-primary">Create</button>
                            <a href="/customeritems" class="btn btn-sm btn-secondary">Back to List</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [SupplyParameterFromForm]
    public CustomerItem CustomerItem { get; set; } = new();

    List<Item> Items { get; set; }
    List<Customer> Customers { get; set; }

    string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<Item, bool>> filter = i => i.Status == Status.Statuses.Active.ToString();

        Func<IQueryable<Item>, IOrderedQueryable<Item>> orderBy = q => q.OrderBy(i => i.Name);

        // Set up includeProperties
        string includeProperties = "";

        // Set up pagination
        int page = 1;
        int pageSize = 500;

        Items ??= await unitOfWork.GetRepository<Item>().GetAllAsync(
            filter,
            orderBy,
            includeProperties,
            page,
            pageSize
           );

        // Set up filter
        Expression<Func<Customer, bool>> customerFilter = i => i.Status == Status.Statuses.Active.ToString();

        Func<IQueryable<Customer>, IOrderedQueryable<Customer>> customerOrderBy = q => q.OrderBy(i => i.Name);

        // Set up includeProperties
        includeProperties = "";

        Customers ??= await unitOfWork.GetRepository<Customer>().GetAllAsync(
            customerFilter,
            customerOrderBy,
            includeProperties,
            page,
            pageSize
            );
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddCustomerItem()
    {
        //Item.CustomerItems = null;
        CustomerItem.AssignedDate = DateTime.Now;

        var customerItemExits = await unitOfWork.GetRepository<CustomerItem>().GetAllAsync(i => i.CustomerId == CustomerItem.CustomerId && i.ItemId == CustomerItem.ItemId);

        if (customerItemExits?.Count > 0)
        {
            ErrorMessage = "This item  is already assigned to this customer.";
            return; // Exit method without updating the item
        }
        await unitOfWork.GetRepository<CustomerItem>().AddAsync(CustomerItem);

        NavigationManager.NavigateTo("/customeritems");
    }
}
