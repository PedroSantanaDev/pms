@page "/CustomerItems/edit"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;
@using pms.app.Enums;
@rendermode InteractiveServer

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]


<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Customer Item</h4>
<hr />
@if (CustomerItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <p>Customer: @CustomerItem.Customer.Name</p>
            <p>Item: @CustomerItem.Item.Name</p>
            <EditForm method="post" Model="CustomerItem" OnValidSubmit="UpdateCustomerItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <input type="hidden" name="CustomerItem.Id" value="@CustomerItem.Id" />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity</label>
                    <InputNumber id="quantity" @bind-Value="@CustomerItem.Quantity" class="form-control" />
                    <ValidationMessage For="() => CustomerItem.Quantity" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customeritems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public CustomerItem? CustomerItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<CustomerItem, bool>> filter = i => i.Id == Id;

        // Set up includeProperties
        string includeProperties = "Item,Customer";

        // Set up pagination
        int page = 1;
        int pageSize = 500;

        var customerItems = await unitOfWork.GetRepository<CustomerItem>().GetAllAsync(
            filter,
            null,
            includeProperties,
            page,
            pageSize
        );

        CustomerItem ??= customerItems.First();

        if (CustomerItem == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateCustomerItem()
    {
        try
        {
            if (CustomerItem != null)
            {
                CustomerItem.Updated = DateTime.Now;
                await unitOfWork.GetRepository<CustomerItem>().UpdateAsync(CustomerItem);
            }
            else
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            var customerItemExists = await CustomerItemExists(Id);
            if (!customerItemExists)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customeritems");
    }

    private async Task<bool> CustomerItemExists(int id)
    {
        var customerItem = await unitOfWork.GetRepository<CustomerItem>().GetByIdAsync(id);

        return customerItem != null;
    }
}
