@page "/customeritems/delete"
@inject pms.app.Data.ApplicationDbContext DB
@using pms.app.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>CustomerItem</h4>
    <hr />
    @if (customeritem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@customeritem.CustomerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@customeritem.Quantity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ItemId</dt>
            <dd class="col-sm-10">@customeritem.ItemId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AssignedDate</dt>
            <dd class="col-sm-10">@customeritem.AssignedDate</dd>
        </dl>
        <EditForm method="post" Model="customeritem" OnValidSubmit="DeleteCustomerItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customeritem is null)">Delete</button> |
            <a href="/customeritems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    CustomerItem? customeritem;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        customeritem = await DB.CustomerItems.FirstOrDefaultAsync(m => m.Id == Id);

        if (customeritem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCustomerItem()
    {
        DB.CustomerItems.Remove(customeritem!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/customeritems");
    }
}
