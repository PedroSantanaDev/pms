@page "/customeritems/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using pms.app.Models
@using Microsoft.AspNetCore.Antiforgery
@using System.Linq.Expressions;

@inject UnitOfWork.IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Customer Item</h4>
    <hr />
    @if (customeritem is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Customer Name</dt>
            <dd class="col-sm-10">@customeritem.Customer.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Item Name</dt>
            <dd class="col-sm-10">@customeritem.Item.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@customeritem.Quantity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Assigned Date</dt>
            <dd class="col-sm-10">@customeritem.AssignedDate</dd>
        </dl>
        <EditForm method="post" Model="customeritem" OnValidSubmit="DeleteCustomerItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customeritem is null)">Delete</button> |
            <a href="/customeritems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    CustomerItem? customeritem;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Set up filter
        Expression<Func<CustomerItem, bool>> filter = i => i.Id == Id;

        // Set up includeProperties
        string includeProperties = "Item,Customer";

        // Set up pagination
        int page = 1;
        int pageSize = 1;

        var customerItems = await unitOfWork.GetRepository<CustomerItem>().GetAllAsync(
            filter,
            null,
            includeProperties,
            page,
            pageSize
        );


        customeritem = customerItems.First();

        if (customeritem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCustomerItem()
    {
        if (customeritem != null)
        {
            await unitOfWork.GetRepository<CustomerItem>().DeleteAsync(Id);
        }
        NavigationManager.NavigateTo("/customeritems");
    }
}
